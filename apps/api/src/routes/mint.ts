import { Router } from 'express';\nimport bs58 from 'bs58';\nimport { createUmi } from '@metaplex-foundation/umi-bundle-defaults';\nimport { mplTokenMetadata, createProgrammableNft } from '@metaplex-foundation/mpl-token-metadata';\nimport { generateSigner, percentAmount, publicKey } from '@metaplex-foundation/umi';\nexport const mintRouter = Router();\nmintRouter.post('/', async (req, res) => {\n  try {\n    const { name, symbol, uri, sellerFeeBps, ruleSet, collectionMint } = req.body || {};\n    const umi = createUmi(process.env.RPC!);\n    umi.use(mplTokenMetadata());\n    umi.use(() => ({ install(umi) { umi.identity = umi.eddsa.createKeypairFromSecretKey( Uint8Array.from(bs58.decode(process.env.MINTER_SECRET!)) )}}));\n    const mint = generateSigner(umi);\n    await createProgrammableNft(umi, { mint, name, symbol, uri, sellerFeeBasisPoints: sellerFeeBps ?? 800, ruleSet: ruleSet ? publicKey(ruleSet) : undefined, collection: collectionMint ? { key: publicKey(collectionMint), verified: false } : undefined }).sendAndConfirm(umi);\n    res.json({ mint: mint.publicKey.toString() });\n  } catch (e:any) { res.status(500).json({ error: e.message }); }\n});
